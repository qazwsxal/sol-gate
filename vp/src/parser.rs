use crate::types::{VPDir, VPHeader, VPIndex};
use nom::bytes::complete::*;
use nom::multi::many0;
use nom::number::complete::le_u32;
use nom::IResult;

pub(crate) fn header(input: &[u8]) -> IResult<&[u8], VPHeader> {
    let (i, _) = tag("VPVP".as_bytes())(input)?;
    let (i, version) = le_u32(i)?;
    let (i, offset) = le_u32(i)?;
    let (i, entries) = le_u32(i)?;
    Ok((
        i,
        VPHeader {
            version,
            offset,
            entries,
        },
    ))
}

fn index_entry(input: &[u8]) -> IResult<&[u8], VPIndex> {
    let (i, fileoffset) = le_u32(input)?;
    let (i, size) = le_u32(i)?;
    let (i, nameref) = take(32usize)(i)?;
    let name: [u8; 32] = nameref.try_into().unwrap();
    let (i, timestamp) = le_u32(i)?;
    Ok((
        i,
        VPIndex {
            fileoffset,
            size,
            name,
            timestamp,
        },
    ))
}

pub(crate) fn indicies(input: &[u8]) -> IResult<&[u8], Vec<VPIndex>> {
    many0(index_entry)(input)
}
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn read_header() {
        // basic header, contains:
        // VPVP literal,
        // version = 2,
        // offset = 31700
        // entries = 30
        let headbuf = b"\x56\x50\x56\x50\x02\x00\x00\x00\xD4\x7B\x00\x00\x1E\x00\x00\x00";
        let (_, parsedheader) = header(headbuf).unwrap();
        assert_eq!(
            VPHeader {
                version: 2,
                offset: 31700,
                entries: 30
            },
            parsedheader
        )
    }
    #[test]
    fn detect_bad_magic_number() {
        // Bad header, actually beginning of DDS file.
        let headbuf = b"\x44\x44\x53\x20\x7C\x00\x00\x00\x07\x10\x0A\x00\x20\x00\x00\x00";
        let parsedheader = header(headbuf);
        assert!(parsedheader.is_err())
    }

    #[test]
    fn read_indicies() {
        // Copy of the index section of MV_Radaricons from 3.6.12
        let indexbuf = b"\x10\x00\x00\x00\x00\x00\x00\x00\x64\x61\x74\x61\x00\x2A\x5A\x00\x00\x00\x00\x00\x00\x01\x00\x00\x50\xF5\x18\x00\x08\x28\x5A\x00\x28\x2A\x5A\x00\x88\xF9\x18\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\
        \x00\x68\x75\x64\x00\x02\x00\x54\x7F\x00\x00\x00\x09\x00\x00\x00\x38\x4D\x5A\x00\x38\x4D\x5A\x00\x88\xF0\x18\x00\xDD\x03\x39\x77\xBC\x00\x00\x00\x00\x10\x00\x00\x00\xF0\x05\x00\x00\x72\x61\x64\x61\x72\x2D\
        \x61\x73\x74\x65\x72\x6F\x69\x64\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x00\x06\x00\x00\x80\x01\x00\x00\x72\x61\x64\x61\x72\x2D\x62\x69\x67\x73\x68\x69\x70\
        \x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x80\x07\x00\x00\xC0\x00\x00\x00\x72\x61\x64\x61\x72\x2D\x62\x6F\x6D\x62\x65\x72\x2E\x64\x64\x73\x00\x00\x00\x00\
        \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x40\x08\x00\x00\x80\x02\x00\x00\x72\x61\x64\x61\x72\x2D\x63\x61\x70\x69\x74\x61\x6C\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
        \x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\xC0\x0A\x00\x00\x80\x01\x00\x00\x72\x61\x64\x61\x72\x2D\x63\x61\x72\x67\x6F\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\
        \x5C\x4C\x40\x0C\x00\x00\x80\x01\x00\x00\x72\x61\x64\x61\x72\x2D\x63\x61\x72\x67\x6F\x32\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\xC0\x0D\x00\x00\x80\
        \x04\x00\x00\x72\x61\x64\x61\x72\x2D\x63\x6F\x6C\x6F\x73\x73\x75\x73\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x40\x12\x00\x00\x80\x02\x00\x00\x72\x61\x64\x61\
        \x72\x2D\x63\x6F\x72\x76\x65\x74\x74\x65\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\xC0\x14\x00\x00\x80\x02\x00\x00\x72\x61\x64\x61\x72\x2D\x63\x72\x75\x69\x73\
        \x65\x72\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x40\x17\x00\x00\x80\x02\x00\x00\x72\x61\x64\x61\x72\x2D\x64\x72\x79\x64\x6F\x63\x6B\x2E\x64\x64\x73\x00\
        \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\xC0\x19\x00\x00\xC0\x00\x00\x00\x72\x61\x64\x61\x72\x2D\x66\x69\x67\x68\x74\x65\x72\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\
        \x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x80\x1A\x00\x00\x80\x02\x00\x00\x72\x61\x64\x61\x72\x2D\x66\x72\x65\x69\x67\x68\x74\x65\x72\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
        \xB7\xC2\x5C\x4C\x00\x1D\x00\x00\x80\x08\x00\x00\x72\x61\x64\x61\x72\x2D\x68\x61\x64\x65\x73\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x80\x25\x00\
        \x00\x80\x04\x00\x00\x72\x61\x64\x61\x72\x2D\x69\x6E\x73\x74\x61\x6C\x6C\x61\x74\x69\x6F\x6E\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x00\x2A\x00\x00\x80\x04\x00\x00\x72\x61\
        \x64\x61\x72\x2D\x6B\x6E\x6F\x73\x73\x6F\x73\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x80\x2E\x00\x00\x80\x04\x00\x00\x72\x61\x64\x61\x72\x2D\x6C\x75\x63\
        \x69\x66\x65\x72\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x00\x33\x00\x00\x80\x08\x00\x00\x72\x61\x64\x61\x72\x2D\x73\x61\x74\x68\x61\x6E\x61\x73\x2E\x64\
        \x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x80\x3B\x00\x00\x80\x02\x00\x00\x72\x61\x64\x61\x72\x2D\x73\x63\x69\x65\x6E\x63\x65\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\
        \x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x00\x3E\x00\x00\x00\x01\x00\x00\x72\x61\x64\x61\x72\x2D\x73\x65\x6E\x74\x72\x79\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
        \x00\x00\xB7\xC2\x5C\x4C\x00\x3F\x00\x00\x80\x01\x00\x00\x72\x61\x64\x61\x72\x2D\x73\x6D\x61\x6C\x6C\x73\x68\x69\x70\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x80\
        \x40\x00\x00\x80\x02\x00\x00\x72\x61\x64\x61\x72\x2D\x75\x6E\x6B\x6E\x6F\x77\x6E\x62\x69\x67\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x00\x43\x00\x00\x00\x01\x00\x00\
        \x72\x61\x64\x61\x72\x2D\x75\x6E\x6B\x6E\x6F\x77\x6E\x73\x6D\x61\x6C\x6C\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x00\x44\x00\x00\x80\x01\x00\x00\x72\x61\x64\x61\x72\x2D\x77\
        \x61\x79\x70\x6F\x69\x6E\x74\x2E\x64\x64\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB7\xC2\x5C\x4C\x80\x45\x00\x00\x00\x00\x00\x00\x2E\x2E\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
        \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x45\x00\x00\x00\x00\x00\x00\x74\x61\x62\x6C\x65\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
        \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x45\x00\x00\x54\x36\x00\x00\x72\x61\x64\x61\x72\x2D\x73\x68\x70\x2E\x74\x62\x6D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
        \x00\x00\x00\x00\xB8\xC2\x5C\x4C\xD4\x7B\x00\x00\x00\x00\x00\x00\x2E\x2E\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
        \x00\xD4\x7B\x00\x00\x00\x00\x00\x00\x2E\x2E\x00\x00\x00\x00\x32\x00\x00\x00\x00\x01\x60\xF4\x18\x00\x50\xF5\x18\x00\x78\xFF\x18\x00\xDD\x03\x39\x77\x5C\x83\x01\x95\x00\x00\x00\x00\x00";

        let index = indicies(indexbuf);
        println!("{:?}", index);
        assert!(index.is_ok())
    }
}
